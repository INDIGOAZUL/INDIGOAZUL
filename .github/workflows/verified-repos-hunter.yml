name: üéØ Verified Repos Bounty Hunter

# FILTERS ACTIVE (as of 2025-10-27):
# ‚úÖ Age Filter: Only bounties created after Jan 2023 (no 2+ year old issues)
# ‚úÖ Activity Filter: Only bounties updated in last 6 months
# ‚úÖ Payment Detection: Skips paid Gitcoin bounties (checks body + comments)
# ‚úÖ Assignment Check: Skips already assigned bounties

on:
  schedule:
    # Run every 3 hours (more frequent for high-value repos)
    - cron: '0 */3 * * *'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  issues: write

jobs:
  search-verified-repos:
    name: Search Verified Repos Only
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Search verified repos for bounties
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          console.log('üîç Searching VERIFIED REPOS ONLY for paid bounties...');

          // HIGH TRUST: Verified repos with official bounty programs
          const verifiedRepos = [
            // Expensify - Official bug bounty program ($50-$10,000+)
            { repo: 'Expensify/App', priority: 'CRITICAL' },

            // Ethereum/Web3 with known bounty programs
            { repo: 'XDC-Community/XDPoSChain', priority: 'HIGH' },
            { repo: 'ethereum/go-ethereum', priority: 'HIGH' },
            { repo: 'ethereum/solidity', priority: 'HIGH' },
            { repo: 'OpenZeppelin/openzeppelin-contracts', priority: 'HIGH' },
            { repo: 'OpenZeppelin/openzeppelin-upgrades', priority: 'MEDIUM' },

            // DeFi protocols with bug bounties
            { repo: 'Uniswap/v3-core', priority: 'HIGH' },
            { repo: 'Uniswap/v2-core', priority: 'MEDIUM' },
            { repo: 'aave/aave-v3-core', priority: 'HIGH' },
            { repo: 'compound-finance/compound-protocol', priority: 'HIGH' },
            { repo: 'yearn/yearn-vaults', priority: 'HIGH' },
            { repo: 'curvefi/curve-contract', priority: 'HIGH' },
            { repo: 'synthetixio/synthetix', priority: 'HIGH' },
            { repo: 'makerdao/dss', priority: 'HIGH' },

            // Layer 2 & Scaling solutions
            { repo: 'OffchainLabs/arbitrum', priority: 'HIGH' },
            { repo: 'ethereum-optimism/optimism', priority: 'HIGH' },
            { repo: 'matter-labs/zksync', priority: 'HIGH' },

            // NFT & Gaming
            { repo: 'OpenSea/seaport', priority: 'MEDIUM' },
            { repo: 'decentraland/marketplace-contracts', priority: 'MEDIUM' },

            // Infrastructure
            { repo: 'ChainSafe/lodestar', priority: 'MEDIUM' },
            { repo: 'prysmaticlabs/prysm', priority: 'MEDIUM' },

            // Major open source projects
            { repo: 'nodejs/node', priority: 'MEDIUM' },
            { repo: 'microsoft/vscode', priority: 'MEDIUM' },
            { repo: 'facebook/react', priority: 'MEDIUM' },
            { repo: 'vercel/next.js', priority: 'MEDIUM' }
          ];

          const foundBounties = [];
          const today = new Date();
          const thirtyDaysAgo = new Date(today - 30 * 24 * 60 * 60 * 1000);
          const twoYearsAgo = new Date(today - 730 * 24 * 60 * 60 * 1000); // Jan 2023 cutoff
          const sixMonthsAgo = new Date(today - 180 * 24 * 60 * 60 * 1000);

          for (const { repo, priority } of verifiedRepos) {
            const [owner, repoName] = repo.split('/');

            console.log(`\nüîç Searching ${repo} (${priority} priority)...`);

            try {
              // Search for issues with bounty labels
              const { data: issues } = await github.rest.issues.listForRepo({
                owner,
                repo: repoName,
                state: 'open',
                labels: 'bounty',
                per_page: 100,
                sort: 'updated',  // Changed from 'created' to 'updated'
                direction: 'desc'
              });

              console.log(`   Found ${issues.length} issues with 'bounty' label`);

              for (const issue of issues) {
                // Skip if pull request
                if (issue.pull_request) continue;

                // Skip if already assigned
                if (issue.assignees && issue.assignees.length > 0) {
                  console.log(`   ‚è≠Ô∏è Skipping #${issue.number} - already assigned`);
                  continue;
                }

                // FILTER 1: Skip bounties older than 2 years (created before 2023)
                const createdDate = new Date(issue.created_at);
                if (createdDate < twoYearsAgo) {
                  console.log(`   ‚è≠Ô∏è Skipping #${issue.number} - too old (created ${createdDate.getFullYear()})`);
                  continue;
                }

                // FILTER 2: Skip bounties with no recent activity (6 months)
                const updatedDate = new Date(issue.updated_at);
                if (updatedDate < sixMonthsAgo) {
                  console.log(`   ‚è≠Ô∏è Skipping #${issue.number} - no activity in 6+ months (last update ${updatedDate.toLocaleDateString()})`);
                  continue;
                }

                const body = (issue.body || '').toLowerCase();
                const title = issue.title.toLowerCase();
                const combined = `${title} ${body}`;

                // FILTER 3: Check for Gitcoin payment confirmation indicators
                const paymentIndicators = [
                  'has been approved & issued',
                  'funding has been approved',
                  'bounty has been paid',
                  'gitcoinbot',
                  'issue status: 1. open 2. started 3. submitted 4. done',
                  'the funding of',
                  'has been issued to'
                ];

                const hasPaymentIndicator = paymentIndicators.some(indicator =>
                  combined.includes(indicator)
                );

                if (hasPaymentIndicator) {
                  console.log(`   ‚è≠Ô∏è Skipping #${issue.number} - payment indicator detected (likely already paid)`);
                  continue;
                }

                // FILTER 4: Check comments for payment confirmation
                if (issue.comments > 0) {
                  try {
                    const { data: comments } = await github.rest.issues.listComments({
                      owner,
                      repo: repoName,
                      issue_number: issue.number,
                      per_page: 100
                    });

                    const hasGitcoinPayment = comments.some(comment => {
                      const commentBody = (comment.body || '').toLowerCase();
                      return (
                        (comment.user.login === 'gitcoinbot' && commentBody.includes('approved & issued')) ||
                        commentBody.includes('the funding of') && commentBody.includes('has been approved & issued')
                      );
                    });

                    if (hasGitcoinPayment) {
                      console.log(`   ‚è≠Ô∏è Skipping #${issue.number} - Gitcoin payment confirmed in comments`);
                      continue;
                    }
                  } catch (error) {
                    console.log(`   ‚ö†Ô∏è Could not fetch comments for #${issue.number}: ${error.message}`);
                  }
                }

                // Extract amount
                const patterns = [
                  /\$(\d+,?\d*)/i,           // $1,000 or $1000
                  /(\d+,?\d*)\s*usd/i,       // 1000 USD
                  /bounty:\s*\$(\d+,?\d*)/i, // Bounty: $1000
                  /reward:\s*\$(\d+,?\d*)/i  // Reward: $1000
                ];

                let amount = null;
                for (const pattern of patterns) {
                  const match = combined.match(pattern);
                  if (match) {
                    amount = parseInt(match[1].replace(/,/g, ''));
                    if (amount < 20) continue; // Skip very small amounts
                    break;
                  }
                }

                // If no amount found, mark as "Unknown" but still include
                if (!amount) {
                  console.log(`   ‚ÑπÔ∏è #${issue.number} - No amount specified, including anyway`);
                }

                // Calculate score
                let score = 10; // Base score for verified repo

                // Amount scoring
                if (amount) {
                  if (amount >= 1000) score += 5;
                  else if (amount >= 500) score += 4;
                  else if (amount >= 200) score += 3;
                  else if (amount >= 100) score += 2;
                  else if (amount >= 50) score += 1;
                }

                // Priority bonus
                if (priority === 'CRITICAL') score += 3;
                else if (priority === 'HIGH') score += 2;
                else if (priority === 'MEDIUM') score += 1;

                // Labels
                if (issue.labels.some(l => l.name.toLowerCase().includes('good first issue'))) score += 2;
                if (issue.labels.some(l => l.name.toLowerCase().includes('help wanted'))) score += 2;
                if (issue.labels.some(l => l.name.toLowerCase().includes('external'))) score += 1;

                // Competition
                if (issue.comments === 0) score += 3;
                else if (issue.comments < 3) score += 2;
                else if (issue.comments < 5) score += 1;

                // Freshness
                const createdDate = new Date(issue.created_at);
                const daysSinceCreated = (today - createdDate) / (1000 * 60 * 60 * 24);
                if (daysSinceCreated < 7) score += 2;
                else if (daysSinceCreated < 14) score += 1;

                // Tech stack preference
                const preferredTech = ['javascript', 'typescript', 'react', 'node', 'web3', 'solidity', 'ethereum', 'polygon'];
                const hasTech = preferredTech.some(tech => combined.includes(tech));
                if (hasTech) score += 2;

                foundBounties.push({
                  title: issue.title,
                  url: issue.html_url,
                  repo: repo,
                  repo_priority: priority,
                  amount: amount || 'Unknown',
                  labels: issue.labels.map(l => l.name),
                  created: issue.created_at,
                  comments: issue.comments,
                  assignees: 0,
                  score: score,
                  body_preview: (issue.body || '').substring(0, 300),
                  verified_repo: true,
                  trust_level: 'HIGH'
                });

                console.log(`   ‚úÖ #${issue.number} - ${amount ? '$' + amount : 'Amount unknown'} - Score: ${score}`);
              }

            } catch (error) {
              console.log(`   ‚ùå Error searching ${repo}: ${error.message}`);
            }
          }

          // Sort by score (best opportunities first)
          foundBounties.sort((a, b) => b.score - a.score);

          console.log(`\n‚úÖ Found ${foundBounties.length} VERIFIED bounties`);

          // Save to file
          const timestamp = new Date().toISOString();
          const report = {
            generated_at: timestamp,
            total_found: foundBounties.length,
            verified_only: true,
            repos_searched: verifiedRepos.map(r => r.repo),
            bounties: foundBounties
          };

          fs.writeFileSync('verified-bounty-opportunities.json', JSON.stringify(report, null, 2));

          // Create detailed summary
          let summary = `## üéØ Verified Repos Bounty Hunter Report\n\n`;
          summary += `**Generated:** ${timestamp}\n`;
          summary += `**Repos Searched:** ${verifiedRepos.length} verified repos\n`;
          summary += `**Total Found:** ${foundBounties.length} bounties\n\n`;

          // Breakdown by repo
          const repoStats = {};
          foundBounties.forEach(b => {
            if (!repoStats[b.repo]) {
              repoStats[b.repo] = { count: 0, total_value: 0 };
            }
            repoStats[b.repo].count++;
            if (b.amount !== 'Unknown') {
              repoStats[b.repo].total_value += b.amount;
            }
          });

          summary += `### üìä Breakdown by Repo\n\n`;
          Object.entries(repoStats).forEach(([repo, stats]) => {
            const priority = verifiedRepos.find(r => r.repo === repo)?.priority || 'MEDIUM';
            const priorityIcon = priority === 'CRITICAL' ? 'üî•' : (priority === 'HIGH' ? '‚≠ê' : '‚ú®');
            summary += `- ${priorityIcon} **${repo}** - ${stats.count} bounties`;
            if (stats.total_value > 0) {
              summary += ` ($${stats.total_value} total)`;
            }
            summary += `\n`;
          });

          summary += `\n### üèÜ Top 10 Opportunities\n\n`;

          foundBounties.slice(0, 10).forEach((bounty, index) => {
            const priorityIcon = bounty.repo_priority === 'CRITICAL' ? 'üî•' : (bounty.repo_priority === 'HIGH' ? '‚≠ê' : '‚ú®');
            summary += `**${index + 1}. ${bounty.title}** ‚úÖ ${priorityIcon}\n`;
            summary += `   - üí∞ Amount: ${bounty.amount === 'Unknown' ? 'Not specified' : '$' + bounty.amount}\n`;
            summary += `   - üì¶ Repo: ${bounty.repo} (${bounty.repo_priority} priority)\n`;
            summary += `   - üîí Trust: HIGH (VERIFIED PROGRAM)\n`;
            summary += `   - üè∑Ô∏è Labels: ${bounty.labels.join(', ') || 'none'}\n`;
            summary += `   - üí¨ Comments: ${bounty.comments}\n`;
            summary += `   - üë• Assignees: ${bounty.assignees}\n`;
            summary += `   - ‚≠ê Score: ${bounty.score}/20\n`;
            summary += `   - üîó [View Issue](${bounty.url})\n\n`;
          });

          if (foundBounties.length === 0) {
            summary += `*No bounties found in verified repos at this time. Next scan in 3 hours.*\n\n`;
          }

          fs.writeFileSync('VERIFIED_SUMMARY.md', summary);
          console.log(summary);

          // Set environment variable for high-value alerts
          const highValueBounties = foundBounties.filter(b =>
            (typeof b.amount === 'number' && b.amount >= 200) || b.repo_priority === 'CRITICAL'
          );

          if (highValueBounties.length > 0) {
            core.exportVariable('HIGH_VALUE_FOUND', 'true');
            core.exportVariable('HIGH_VALUE_COUNT', highValueBounties.length);
          }

    - name: Create alert for high-value bounties
      if: env.HIGH_VALUE_FOUND == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('verified-bounty-opportunities.json', 'utf8'));

          const highValueBounties = report.bounties.filter(b =>
            (typeof b.amount === 'number' && b.amount >= 200) || b.repo_priority === 'CRITICAL'
          );

          if (highValueBounties.length === 0) return;

          let issueBody = `## üö® HIGH-VALUE BOUNTIES DETECTED\n\n`;
          issueBody += `**Alert Time:** ${new Date().toISOString()}\n`;
          issueBody += `**High-Value Bounties Found:** ${highValueBounties.length}\n\n`;

          issueBody += `### üí∞ Bounties $200+ or CRITICAL Priority\n\n`;

          highValueBounties.forEach((bounty, index) => {
            issueBody += `#### ${index + 1}. ${bounty.title}\n`;
            issueBody += `- **Amount:** ${bounty.amount === 'Unknown' ? 'Not specified' : '$' + bounty.amount}\n`;
            issueBody += `- **Repo:** ${bounty.repo} (${bounty.repo_priority} priority)\n`;
            issueBody += `- **Score:** ${bounty.score}/20 ‚≠ê\n`;
            issueBody += `- **Comments:** ${bounty.comments} (${bounty.comments === 0 ? 'NO COMPETITION!' : 'some competition'})\n`;
            issueBody += `- **Link:** ${bounty.url}\n\n`;
            issueBody += `**Preview:**\n> ${bounty.body_preview}\n\n`;
            issueBody += `---\n\n`;
          });

          issueBody += `*Auto-generated by Verified Repos Bounty Hunter*`;

          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® ${highValueBounties.length} High-Value Bounty Alert ($200+)`,
              body: issueBody,
              labels: ['bounty-alert', 'high-value']
            });

            console.log('‚úÖ High-value bounty alert issue created');
          } catch (error) {
            console.log('‚ö†Ô∏è Could not create alert issue:', error.message);
          }

    - name: Commit bounty report
      run: |
        git config user.name "Verified Repos Hunter"
        git config user.email "bounty-hunter@latanda.online"

        if [ -f verified-bounty-opportunities.json ]; then
          git add verified-bounty-opportunities.json VERIFIED_SUMMARY.md
          git commit -m "üéØ Auto-update: Verified repos bounties $(date +%Y-%m-%d)" || echo "No changes to commit"
          git push || echo "Nothing to push"
        fi

    - name: Create notification summary
      run: |
        echo "## üéØ Verified Repos Bounty Hunter Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f VERIFIED_SUMMARY.md ]; then
          cat VERIFIED_SUMMARY.md >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Next scan:** In 3 hours" >> $GITHUB_STEP_SUMMARY
        echo "**Searching:** VERIFIED REPOS ONLY (HIGH TRUST)" >> $GITHUB_STEP_SUMMARY
